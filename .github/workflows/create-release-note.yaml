name: Create Release Note
on:
  pull_request:
    branches: [release]
    types: [opened, synchronize, reopened]
  push:
    branches: [release]

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.check.outputs.version_changed }}
      new_version: ${{ steps.check.outputs.new_version }}
      version_type: ${{ steps.check.outputs.version_type }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check package.json version diff
        id: check
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # Check for pull request to release branch
            # Comparison for PR: compare base and head branches
            BASE_REF="${{ github.event.pull_request.base.ref }}"
            HEAD_REF="${{ github.event.pull_request.head.ref }}"
            
            git fetch origin $BASE_REF
            git fetch origin $HEAD_REF
            
            BASE_VERSION=$(git show origin/$BASE_REF:package.json | jq -r '.version')
            HEAD_VERSION=$(git show origin/$HEAD_REF:package.json | jq -r '.version')
            
            echo "Base branch ($BASE_REF) version: $BASE_VERSION"
            echo "Head branch ($HEAD_REF) version: $HEAD_VERSION"
            
            OLD_VERSION=$BASE_VERSION
            NEW_VERSION=$HEAD_VERSION
           else
            # Check for push to release branch
            # Comparison for push: compare the latest commit with its parent
            OLD_VERSION=$(git show HEAD^:package.json | jq -r '.version' 2>/dev/null || echo "0.0.0")
            NEW_VERSION=$(jq -r '.version' package.json)
            
            echo "Previous commit version: $OLD_VERSION"
            echo "Current commit version: $NEW_VERSION"
          fi

          if [ "$NEW_VERSION" != "$OLD_VERSION" ]; then
            echo "version_changed=true" >> $GITHUB_OUTPUT
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
            
            # Preparation judgement (e.g.: 1.2.3 -> MAJOR=1, MINOR=2, PATCH=3)
            IFS='.' read -r OLD_MAJOR OLD_MINOR OLD_PATCH <<< "$OLD_VERSION"
            IFS='.' read -r NEW_MAJOR NEW_MINOR NEW_PATCH <<< "$NEW_VERSION"
            
            # Judge version type
            if [ "$NEW_MAJOR" != "$OLD_MAJOR" ]; then
              VERSION_TYPE="major"
              echo "💫 Major version change: $OLD_VERSION -> $NEW_VERSION"
            elif [ "$NEW_MINOR" != "$OLD_MINOR" ]; then
              VERSION_TYPE="minor"
              echo "🍀 Minor version change: $OLD_VERSION -> $NEW_VERSION"
            else
              VERSION_TYPE="patch"
              echo "🎸 Patch version change: $OLD_VERSION -> $NEW_VERSION"
            fi
            
            echo "version_type=$VERSION_TYPE" >> $GITHUB_OUTPUT
          else
            echo "version_changed=false" >> $GITHUB_OUTPUT
            echo "🎹 Version not changed"
          fi

  add-label-to-pr:
    needs: check-version
    if: github.event_name == 'pull_request'
    permissions:
      pull-requests: write
      issues: write
    runs-on: ubuntu-latest
    steps:
      - name: Add version label to PR
        if: needs.check-version.outputs.version_changed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const versionType = '${{ needs.check-version.outputs.version_type }}';

            const labelConfig = {
              'major': {
                name: 'Major VerUp',
                color: '4455dd',
                description: 'Major version update'
              },
              'minor': {
                name: 'Minor VerUp',
                color: '884499',
                description: 'Minor version update'
              },
              'patch': {
                name: 'Patch VerUp',
                color: '88dd44',
                description: 'Patch version update'
              }
            };

            const labelInfo = labelConfig[versionType];
            const allVersionLabels = Object.values(labelConfig).map(config => config.name);

            try {
              await github.rest.issues.updateLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: labelInfo.name,
                color: labelInfo.color,
                description: labelInfo.description
              });
            } catch (error) {
              if (error.status === 404) {
                await github.rest.issues.createLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  name: labelInfo.name,
                  color: labelInfo.color,
                  description: labelInfo.description
                });
              }
            }

            // Delete existing version labels (Major VerUp, Minor VerUp, patch)
            const existingLabels = await github.rest.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });

            for (const label of existingLabels.data) {
              if (allVersionLabels.includes(label.name)) {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  name: label.name
                });
              }
            }

            // Add new version label
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: [versionType]
            });

  release-draft:
    needs: check-version
    if: needs.check-version.outputs.version_changed == 'true' && github.event_name == 'push'
    permissions:
      contents: write
      pull-requests: read
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Create Release Draft
        uses: release-drafter/release-drafter@v6
        with:
          config-name: release-drafter.yaml
          commitish: release
          version: ${{ needs.check-version.outputs.new_version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
